{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"[1] Non eram nescius, Brute, cum, quae summis ingeniis exquisitaque doctrina philosophi Graeco sermone tractavissent, ea Latinis litteris mandaremus, fore ut hic noster labor in varias reprehensiones incurreret. nam quibusdam, et iis quidem non admodum indoctis, totum hoc displicet philosophari. quidam autem non tam id reprehendunt, si remissius agatur, sed tantum studium tamque multam operam ponendam in eo non arbitrantur. erunt etiam, et ii quidem eruditi Graecis litteris, contemnentes Latinas, qui se dicant in Graecis legendis operam malle consumere. postremo aliquos futuros suspicor, qui me ad alias litteras vocent, genus hoc scribendi, etsi sit elegans, personae tamen et dignitatis esse negent. [2] Contra quos omnis dicendum breviter existimo. Quamquam philosophiae quidem vituperatoribus satis responsum est eo libro, quo a nobis philosophia defensa et collaudata est, cum esset accusata et vituperata ab Hortensio. qui liber cum et tibi probatus videretur et iis, quos ego posse iudicare arbitrarer, plura suscepi veritus ne movere hominum studia viderer, retinere non posse. Qui autem, si maxime hoc placeat, moderatius tamen id volunt fieri, difficilem quandam temperantiam postulant in eo, quod semel admissum coerceri reprimique non potest, ut propemodum iustioribus utamur illis, qui omnino avocent a philosophia, quam his, qui rebus infinitis modum constituant in reque eo meliore, quo maior sit, mediocritatem desiderent. [3] Sive enim ad sapientiam perveniri potest, non paranda nobis solum ea, sed fruenda etiam [sapientia] est; sive hoc difficile est, tamen nec modus est ullus investigandi veri, nisi inveneris, et quaerendi defatigatio turpis est, cum id, quod quaeritur, sit pulcherrimum. etenim si delectamur, cum scribimus, quis est tam invidus, qui ab eo nos abducat? sin laboramus, quis est, qui alienae modum statuat industriae? nam ut Terentianus Chremes non inhumanus, qui novum vicinum non vult 'fodere aut arare aut aliquid ferre denique' -- non enim illum ab industria, sed ab inliberali labore deterret --, sic isti curiosi, quos offendit noster minime nobis iniucundus labor. [4] Iis igitur est difficilius satis facere, qui se Latina scripta dicunt contemnere. in quibus hoc primum est in quo admirer, cur in gravissimis rebus non delectet eos sermo patrius, cum idem fabellas Latinas ad verbum e Graecis expressas non inviti legant. quis enim tam inimicus paene nomini Romano est, qui Ennii Medeam aut Antiopam Pacuvii spernat aut reiciat, quod se isdem Euripidis fabulis delectari dicat, Latinas litteras oderit? Synephebos ego, inquit, potius Caecilii aut Andriam Terentii quam utramque Menandri legam? [5] A quibus tantum dissentio, ut, cum Sophocles vel optime scripserit Electram, tamen male conversam Atilii mihi legendam putem, de quo Lucilius: 'ferreum scriptorem', verum, opinor, scriptorem tamen, ut legendus sit. rudem enim esse omnino in nostris poetis aut inertissimae segnitiae est aut fastidii delicatissimi. mihi quidem nulli satis eruditi videntur, quibus nostra ignota sunt. an 'Utinam ne in nemore . . .' nihilo minus legimus quam hoc idem Graecum, quae autem de bene beateque vivendo a Platone disputata sunt, haec explicari non placebit Latine? [6] Quid? si nos non interpretum fungimur munere, sed tuemur ea, quae dicta sunt ab iis quos probamus, eisque nostrum iudicium et nostrum scribendi ordinem adiungimus, quid habent, cur Graeca anteponant iis, quae et splendide dicta sint neque sint conversa de Graecis? nam si dicent ab illis has res esse tractatas, ne ipsos quidem Graecos est cur tam multos legant, quam legendi sunt. quid enim est a Chrysippo praetermissum in Stoicis? legimus tamen Diogenem, Antipatrum, Mnesarchum, Panaetium, multos alios in primisque familiarem nostrum Posidonium. quid? Theophrastus mediocriterne delectat, cum tractat locos ab Aristotele ante tractatos? quid? Epicurei num desistunt de isdem, de quibus et ab Epicuro scriptum est et ab antiquis, ad arbitrium suum scribere? quodsi Graeci leguntur a Graecis isdem de rebus alia ratione compositis, quid est, cur nostri a nostris non legantur? [7] Quamquam, si plane sic verterem Platonem aut Aristotelem, ut verterunt nostri poetae fabulas, male, credo, mererer de meis civibus, si ad eorum cognitionem divina illa ingenia transferrem. sed id neque feci adhuc nec mihi tamen, ne faciam, interdictum puto. locos quidem quosdam, si videbitur, transferam, et maxime ab iis, quos modo nominavi, cum inciderit, ut id apte fieri possit, ut ab Homero Ennius, Afranius a Menandro solet. Nec vero, ut noster Lucilius, recusabo, quo minus omnes mea legant. utinam esset ille Persius, Scipio vero et Rutilius multo etiam magis, quorum ille iudicium reformidans Tarentinis ait se et Consentinis et Siculis scribere. facete is quidem, sicut alia; sed neque tam docti tum erant, ad quorum iudicium elaboraret, et sunt illius scripta leviora, ut urbanitas summa appareat, doctrina mediocris. [8] Ego autem quem timeam lectorem, cum ad te ne Graecis quidem cedentem in philosophia audeam scribere? quamquam a te ipso id quidem facio provocatus gratissimo mihi libro, quem ad me de virtute misisti. Sed ex eo credo quibusdam usu venire; ut abhorreant a Latinis, quod inciderint in inculta quaedam et horrida, de malis Graecis Latine scripta deterius. quibus ego assentior, dum modo de isdem rebus ne Graecos quidem legendos putent. res vero bonas verbis electis graviter ornateque dictas quis non legat? nisi qui se plane Graecum dici velit, ut a Scaevola est praetore salutatus Athenis Albucius. [9] Quem quidem locum comit multa venustate et omni sale idem Lucilius, apud quem praeclare Scaevola: Graecum te, Albuci, quam Romanum atque Sabinum, municipem Ponti, Tritani, centurionum, praeclarorum hominum ac primorum signiferumque, maluisti dici. Graece ergo praetor Athenis, id quod maluisti, te, cum ad me accedis, saluto: 'chaere,' inquam, 'Tite!' lictores, turma omnis chorusque: 'chaere, Tite!' hinc hostis mi Albucius, hinc inimicus. [10] Sed iure Mucius. ego autem mirari [satis] non queo unde hoc sit tam insolens domesticarum rerum fastidium. non est omnino hic docendi locus; sed ita sentio et saepe disserui, Latinam linguam non modo non inopem, ut vulgo putarent, sed locupletiorem etiam esse quam Graecam. quando enim nobis, vel dicam aut oratoribus bonis aut poetis, postea quidem quam fuit quem imitarentur, ullus orationis vel copiosae vel elegantis ornatus defuit? Ego vero, quoniam forensibus operis, laboribus, periculis non deseruisse mihi videor praesidium, in quo a populo Romano locatus sum, debeo profecto, quantumcumque possum, in eo quoque elaborare, ut sint opera, studio, labore meo doctiores cives mei, nec cum istis tantopere pugnare, qui Graeca legere malint, modo legant illa ipsa, ne simulent, et iis servire, qui vel utrisque litteris uti velint vel, si suas habent, illas non magnopere desiderent. [11] Qui autem alia malunt scribi a nobis, aequi esse debent, quod et scripta multa sunt, sic ut plura nemini e nostris, et scribentur fortasse plura, si vita suppetet; et tamen, qui diligenter haec, quae de philosophia litteris mandamus, legere assueverit, iudicabit nulla ad legendum his esse potiora. quid est enim in vita tantopere quaerendum quam cum omnia in philosophia, tum id, quod his libris quaeritur, qui sit finis, quid extremum, quid ultimum, quo sint omnia bene vivendi recteque faciendi consilia referenda, quid sequatur natura ut summum ex rebus expetendis, quid fugiat ut extremum malorum? qua de re cum sit inter doctissimos summa dissensio, quis alienum putet eius esse dignitatis, quam mihi quisque tribuat, quid in omni munere vitae optimum et verissimum sit, exquirere? [12] An, partus ancillae sitne in fructu habendus, disseretur inter principes civitatis, P. Scaevolam Maniumque Manilium, ab iisque M. Brutus dissentiet -- quod et acutum genus est et ad usus civium non inutile, nosque ea scripta reliquaque eiusdem generis et legimus libenter et legemus -- haec, quae vitam omnem continent, neglegentur? nam, ut sint illa vendibiliora, haec uberiora certe sunt. quamquam id quidem licebit iis existimare, qui legerint. nos autem hanc omnem quaestionem de finibus bonorum et malorum fere a nobis explicatam esse his litteris arbitramur, in quibus, quantum potuimus, non modo quid nobis probaretur, sed etiam quid a singulis philosophiae disciplinis diceretur, persecuti sumus. [13] Ut autem a facillimis ordiamur, prima veniat in medium Epicuri ratio, quae plerisque notissima est. quam a nobis sic intelleges eitam, ut ab ipsis, qui eam disciplinam probant, non soleat accuratius explicari; verum enim invenire volumus, non tamquam adversarium aliquem convincere. accurate autem quondam a L. Torquato, homine omni doctrina erudito, defensa est Epicuri sententia de voluptate, a meque ei responsum, cum C. Triarius, in primis gravis et doctus adolescens, ei disputationi interesset. [14] Nam cum ad me in Cumanum salutandi causa uterque venisset, pauca primo inter nos de litteris, quarum summum erat in utroque studium, deinde Torquatus: Quoniam nacti te, inquit, sumus aliquando otiosum, certe audiam, quid sit, quod Epicurum nostrum non tu quidem oderis, ut fere faciunt, qui ab eo dissentiunt, sed certe non probes, eum quem ego arbitror unum vidisse verum maximisque erroribus animos hominum liberavisse et omnia tradidisse, quae pertinerent ad bene beateque vivendum. sed existimo te, sicut nostrum Triarium, minus ab eo delectari, quod ista Platonis, Aristoteli, Theophrasti orationis ornamenta neglexerit. nam illud quidem adduci vix possum, ut ea, quae senserit ille, tibi non vera videantur. [15] Vide, quantum, inquam, fallare, Torquate. oratio me istius philosophi non offendit; nam et complectitur verbis, quod vult, et dicit plane, quod intellegam; et tamen ego a philosopho, si afferat eloquentiam, non asperner, si non habeat, non admodum flagitem. re mihi non aeque satisfacit, et quidem locis pluribus. sed quot homines, tot sententiae; falli igitur possumus. Quam ob rem tandem, inquit, non satisfacit? te enim iudicem aequum puto, modo quae dicat ille bene noris. [16] Nisi mihi Phaedrum, inquam, tu mentitum aut Zenonem putas, quorum utrumque audivi, cum mihi nihil sane praeter sedulitatem probarent, omnes mihi Epicuri sententiae satis notae sunt. atque eos, quos nominavi, cum Attico nostro frequenter audivi, cum miraretur ille quidem utrumque, Phaedrum autem etiam amaret, cotidieque inter nos ea, quae audiebamus, conferebamus, neque erat umquam controversia, quid ego intellegerem, sed quid probarem. [17] Quid igitur est? inquit; audire enim cupio, quid non probes. Principio, inquam, in physicis, quibus maxime gloriatur, primum totus est alienus. Democritea dicit perpauca mutans, sed ita, ut ea, quae corrigere vult, mihi quidem depravare videatur. ille atomos quas appellat, id est corpora individua propter soliditatem, censet in infinito inani, in quo nihil nec summum nec infimum nec medium nec ultimum nec extremum sit, ita ferri, ut concursionibus inter se cohaerescant, ex quo efficiantur ea, quae sint quaeque cernantur, omnia, eumque motum atomorum nullo a principio, sed ex aeterno tempore intellegi convenire. [18] Epicurus autem, in quibus sequitur Democritum, non fere labitur. quamquam utriusque cum multa non probo, tum illud in primis, quod, cum in rerum natura duo quaerenda sint, unum, quae materia sit, ex qua quaeque res efficiatur, alterum, quae vis sit, quae quidque efficiat, de materia disseruerunt, vim et causam efficiendi reliquerunt. sed hoc commune vitium, illae Epicuri propriae ruinae: censet enim eadem illa individua et solida corpora ferri deorsum suo pondere ad lineam, hunc naturalem esse omnium corporum motum. [19] Deinde ibidem homo acutus, cum illud ocurreret, si omnia deorsus e regione ferrentur et, ut dixi, ad lineam, numquam fore ut atomus altera alteram posset attingere itaque ** attulit rem commenticiam: declinare dixit atomum perpaulum, quo nihil posset fieri minus; ita effici complexiones et copulationes et adhaesiones atomorum inter se, ex quo efficeretur mundus omnesque partes mundi, quaeque in eo essent. Quae cum tota res (est) ficta pueriliter, tum ne efficit [quidem], quod vult. nam et ipsa declinatio ad libidinem fingitur -- ait enim declinare atomum sine causa; quo nihil turpius physico, quam fieri quicquam sine causa dicere, -- et illum motum naturalem omnium ponderum, ut ipse constituit, e regione inferiorem locum petentium sine causa eripuit atomis nec tamen id, cuius causa haec finxerat, assecutus est. [20] Nam si omnes atomi declinabunt, nullae umquam cohaerescent, sive aliae declinabunt, aliae suo nutu recte ferentur, primum erit hoc quasi, provincias atomis dare, quae recte, quae oblique ferantur, deinde eadem illa atomorum, in quo etiam Democritus haeret, turbulenta concursio hunc mundi ornatum efficere non poterit. ne illud quidem physici, credere aliquid esse minimum, quod profecto numquam putavisset, si a Polyaeno, familiari suo, geometrica discere maluisset quam illum etiam ipsum dedocere. Sol Democrito magnus videtur, quippe homini erudito in geometriaque perfecto, huic pedalis fortasse; tantum enim esse censet, quantus videtur, vel paulo aut maiorem aut minorem. [21] Ita, quae mutat, ea corrumpit, quae sequitur sunt tota Democriti, atomi, inane, imagines, quae eidola nominant, quorum incursione non solum videamus, sed etiam cogitemus; infinitio ipsa, quam apeirian vocant, tota ab illo est, tum innumerabiles mundi, qui et oriantur et intereant cotidie. Quae etsi mihi nullo modo probantur, tamen Democritum laudatum a ceteris ab hoc, qui eum unum secutus esset, nollem vituperatum. [22] Iam in altera philosophiae parte. quae est quaerendi ac disserendi, quae logikh dicitur, iste vester plane, ut mihi quidem videtur, inermis ac nudus est. tollit definitiones, nihil de dividendo ac partiendo docet, non quo modo efficiatur concludaturque ratio tradit, non qua via captiosa solvantur ambigua distinguantur ostendit; iudicia rerum in sensibus ponit, quibus si semel aliquid falsi pro vero probatum sit, sublatum esse omne iudicium veri et falsi putat. [23] Confirmat autem illud vel maxime, quod ipsa natura, ut ait ille, sciscat et probet, id est voluptatem et dolorem. ad haec et quae sequamur et quae fugiamus refert omnia. quod quamquam Aristippi est a Cyrenaicisque melius liberiusque defenditur, tamen eius modi esse iudico, ut nihil homine videatur indignius. ad maiora enim quaedam nos natura genuit et conformavit, ut mihi quidem videtur. ac fieri potest, ut errem, sed ita prorsus existimo, neque eum Torquatum, qui hoc primus cognomen invenerit, aut torquem illum hosti detraxisse, ut aliquam ex eo perciperet corpore voluptatem, aut cum Latinis tertio consulatu conflixisse apud Veserim propter voluptatem; quod vero securi percussit filium, privavisse se etiam videtur multis voluptatibus, cum ipsi naturae patrioque amori praetulerit ius maiestatis atque imperii.","title":"Placeholder"},{"location":"resources/","text":"Resources More resources to be added as project progresses: GoFullPage Screenshot Chrome Extension ' Userflow Diagram Research Slide Deck Our Figma Task and User Flow Our Shared Google Drive For Developers Frontend Architecture Backend Architecture GitHub Architecture","title":"Resources"},{"location":"resources/#resources","text":"More resources to be added as project progresses: GoFullPage Screenshot Chrome Extension ' Userflow Diagram Research Slide Deck Our Figma Task and User Flow Our Shared Google Drive","title":"Resources"},{"location":"resources/#for-developers","text":"Frontend Architecture Backend Architecture GitHub Architecture","title":"For Developers"},{"location":"developer/backend/","text":"Backend Architecture \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 ISSUE_TEMPLATE/ \u251c\u2500\u2500 config/ # Backend \u251c\u2500\u2500 docker/ # Backend \u251c\u2500\u2500 frontend/ # Backend \u2502 \u251c\u2500\u2500 migrations/ # Backend \u2502 \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 pages/ \u2502 \u2514\u2500\u2500 templates/ \u2502 \u251c\u2500\u2500 static/ \u2502 \u2514\u2500\u2500 frontend/ \u2502 \u2514\u2500\u2500 templates/ \u2502 \u2514\u2500\u2500 frontend/ \u251c\u2500\u2500 server/ # Backend \u2502 \u2514\u2500\u2500 migrations/ # Backend \u2514\u2500\u2500 <loose files> # Backend Overall project structure \u251c\u2500\u2500 config/ \u2502 \u251c\u2500\u2500 <Django Project Files> \u251c\u2500\u2500 docker/ \u2502 \u251c\u2500\u2500 django \u2502 \u2514\u2500\u2500 webpack \u251c\u2500\u2500 frontend/ \u2502 \u2514\u2500\u2500 <Django App Files> \u251c\u2500\u2500 server/ \u2502 \u251c\u2500\u2500 <Django App Files> \u2502 \u2514\u2500\u2500 <RESTFramework Files> \u251c\u2500\u2500 .dockerignore \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 requirements.txt Backend Architecture Summary Backend Tech Stack : Django, DjangoRESTFramework, Docker The backend architecture is consists the docker/ directory, the Django config/ project, the frontend/ and server/ Django apps, and a couple of Django or Docker-related loose files. In addition to serving as part of our backend, the frontend/ directory also serves our frontend architecture. More about the frontend/ directory as it relates our frontend architecture can be found in our guide on Frontend Architecture . Overview of Directories and Files config/: houses the Django project files. <Django Project Files>: More on the files in this directory can be found in Django's documentation . docker/: contains two dockerfiles. django contains information for our Django server setup. webpack contains information to start our webpack watch plugin. <Django App>: currently we have two directories that are Django apps: frontend/ and server/ . Within these directories are the default <Django App Files> that are created with every app as well as <RESTFramework Files> . <Django App Files>: These files make up a Django App. To know more about these apps, read the section about Django App Files . <RESTFramework Files>: Currently consists of only serializers.py , these files are additional files that support Django via the DjangoRestFramework library . .dockerignore: This file tells Docker to ignore certain files when building the container. These are usually files that pertain to docker or git, which are not important when building the webserver. docker-compose.yml: Contains instructions for docker when we run \"docker compose\". To know more about what each line does, please consult Docker's documentation . manage.py: Part of Django, this is the entry point file for starting the Django server. This file handles a lot of critical settings, so be sure to read up on it in Django's documentation . requirements.txt: A Python file that contains all dependencies for a project. It is the Python equivalent to Javascript's package.json . Docker Docker is a platform that allows packaging and virtualizing applications within a container, giving it the powerful ability to collaborate in a stable, inter-developer environment, and deploying web applications with the greatest of ease. We will not be going too much into Docker here, but we will explain in greater depth some of the Docker configurations we have made. docker-compose.yml This file contains configuration directions for docker compose. It consists of three services: pgdb (our database), webpack (our webpack bundler), and django (our django server). The webpack and django service relies in separate dockerfiles, located in the docker directory to build the container. This separation of dockerfiles enable each container to be build with its own set of dependencies. It also makes rebuilding the container simple when dependencies are migrated to a newer version. For those of you used to creating applications without Docker, most would run webpack and django in separate terminals, so that they can both run at the same time. For the purposes of brevity, the different services can be considered to be Docker's way of running separate terminals. One will also notice that the Django command uses a placeholder server name, 0.0.0.0:8000. This placeholder is important, since Docker creates an isolated environment. As a result, servers that are run in Docker does not recognize a browser from outside of that environment. Without this server name, localhost:8000 will not reach the server, as the server would recognize your browser as coming from a foreign machine. Therefore, all warnings related to 0.0.0.0, should they pop-up, should be ignored. Django App Files \u251c\u2500\u2500 migrations/ \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 admin.py \u251c\u2500\u2500 apps.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 tests.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 views.py Files generated by Django when creating a new Django app As of right now, no specific changes have been made to these files, so please refer to Django's documentation for now to learn what they do in a general sense. Django REST Framework Files \u251c\u2500\u2500 serializers.py RESTFramework files used to create a Django REST API As of right now, no specific changes have been made to these files, so please refer to DjangoRESTFramework's documentation for now to learn what they do in a general sense. Additional Resources Docker Documentation Django 4.0 Documentation DjangoRestFramework Documentation","title":"Backend Architecture"},{"location":"developer/backend/#backend-architecture","text":"\u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 ISSUE_TEMPLATE/ \u251c\u2500\u2500 config/ # Backend \u251c\u2500\u2500 docker/ # Backend \u251c\u2500\u2500 frontend/ # Backend \u2502 \u251c\u2500\u2500 migrations/ # Backend \u2502 \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 pages/ \u2502 \u2514\u2500\u2500 templates/ \u2502 \u251c\u2500\u2500 static/ \u2502 \u2514\u2500\u2500 frontend/ \u2502 \u2514\u2500\u2500 templates/ \u2502 \u2514\u2500\u2500 frontend/ \u251c\u2500\u2500 server/ # Backend \u2502 \u2514\u2500\u2500 migrations/ # Backend \u2514\u2500\u2500 <loose files> # Backend Overall project structure \u251c\u2500\u2500 config/ \u2502 \u251c\u2500\u2500 <Django Project Files> \u251c\u2500\u2500 docker/ \u2502 \u251c\u2500\u2500 django \u2502 \u2514\u2500\u2500 webpack \u251c\u2500\u2500 frontend/ \u2502 \u2514\u2500\u2500 <Django App Files> \u251c\u2500\u2500 server/ \u2502 \u251c\u2500\u2500 <Django App Files> \u2502 \u2514\u2500\u2500 <RESTFramework Files> \u251c\u2500\u2500 .dockerignore \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 requirements.txt Backend Architecture","title":"Backend Architecture"},{"location":"developer/backend/#summary","text":"Backend Tech Stack : Django, DjangoRESTFramework, Docker The backend architecture is consists the docker/ directory, the Django config/ project, the frontend/ and server/ Django apps, and a couple of Django or Docker-related loose files. In addition to serving as part of our backend, the frontend/ directory also serves our frontend architecture. More about the frontend/ directory as it relates our frontend architecture can be found in our guide on Frontend Architecture .","title":"Summary"},{"location":"developer/backend/#overview-of-directories-and-files","text":"config/: houses the Django project files. <Django Project Files>: More on the files in this directory can be found in Django's documentation . docker/: contains two dockerfiles. django contains information for our Django server setup. webpack contains information to start our webpack watch plugin. <Django App>: currently we have two directories that are Django apps: frontend/ and server/ . Within these directories are the default <Django App Files> that are created with every app as well as <RESTFramework Files> . <Django App Files>: These files make up a Django App. To know more about these apps, read the section about Django App Files . <RESTFramework Files>: Currently consists of only serializers.py , these files are additional files that support Django via the DjangoRestFramework library . .dockerignore: This file tells Docker to ignore certain files when building the container. These are usually files that pertain to docker or git, which are not important when building the webserver. docker-compose.yml: Contains instructions for docker when we run \"docker compose\". To know more about what each line does, please consult Docker's documentation . manage.py: Part of Django, this is the entry point file for starting the Django server. This file handles a lot of critical settings, so be sure to read up on it in Django's documentation . requirements.txt: A Python file that contains all dependencies for a project. It is the Python equivalent to Javascript's package.json .","title":"Overview of Directories and Files"},{"location":"developer/backend/#docker","text":"Docker is a platform that allows packaging and virtualizing applications within a container, giving it the powerful ability to collaborate in a stable, inter-developer environment, and deploying web applications with the greatest of ease. We will not be going too much into Docker here, but we will explain in greater depth some of the Docker configurations we have made.","title":"Docker"},{"location":"developer/backend/#docker-composeyml","text":"This file contains configuration directions for docker compose. It consists of three services: pgdb (our database), webpack (our webpack bundler), and django (our django server). The webpack and django service relies in separate dockerfiles, located in the docker directory to build the container. This separation of dockerfiles enable each container to be build with its own set of dependencies. It also makes rebuilding the container simple when dependencies are migrated to a newer version. For those of you used to creating applications without Docker, most would run webpack and django in separate terminals, so that they can both run at the same time. For the purposes of brevity, the different services can be considered to be Docker's way of running separate terminals. One will also notice that the Django command uses a placeholder server name, 0.0.0.0:8000. This placeholder is important, since Docker creates an isolated environment. As a result, servers that are run in Docker does not recognize a browser from outside of that environment. Without this server name, localhost:8000 will not reach the server, as the server would recognize your browser as coming from a foreign machine. Therefore, all warnings related to 0.0.0.0, should they pop-up, should be ignored.","title":"docker-compose.yml"},{"location":"developer/backend/#django-app-files","text":"\u251c\u2500\u2500 migrations/ \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 admin.py \u251c\u2500\u2500 apps.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 tests.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 views.py Files generated by Django when creating a new Django app As of right now, no specific changes have been made to these files, so please refer to Django's documentation for now to learn what they do in a general sense.","title":"Django App Files"},{"location":"developer/backend/#django-rest-framework-files","text":"\u251c\u2500\u2500 serializers.py RESTFramework files used to create a Django REST API As of right now, no specific changes have been made to these files, so please refer to DjangoRESTFramework's documentation for now to learn what they do in a general sense.","title":"Django REST Framework Files"},{"location":"developer/backend/#additional-resources","text":"Docker Documentation Django 4.0 Documentation DjangoRestFramework Documentation","title":"Additional Resources"},{"location":"developer/development-culture/","text":"Development Culture At CivicTechJobs, the developers of our team have 3 key tasks: Make issues Resolve issues Review code This guide will discuss how each of these work at CivicTechJobs. If you have any questions be sure to let us know! We strive to create an inclusive space for developers to learn and achieve their goals. Make Issues To make an issue, follow this guide from GitHub, or take a look at this section of the CONTRIBUTING.md. At CivicTechJobs, updating the project starts with creating an issue outlining the situation and changes needed to resolve the situation. When writing an issue, a good rule of thumb is to write as if another developer would be the one to work on the issue. Therefore, being thorough is better than brief. Some good guidelines to follow: Write a brief, two sentence summary for the overview. Be sure to note why these changes is needed. In the overview, use language with little jargon. Action items are usually step by step instructions or a list of requirements. Longer explanations or useful documentation, if needed, are placed in the Instruction/Resources section. Dependencies should 90% of the time be another issue. If this issue does not exist, it should probably be made and referenced as a dependency. Likewise, the dependency should reference the issue it is a dependency for so that there is a trail to release issues with dependencies. Check out examples of developer issues, such as this , for how to structure and word issues. After writing out the issue, be sure to add labels . At minimum, we need three labels, one each from the \"size\", \"role\" and \"feature/p-feature\" series. In most cases, you should not create your own label. If you are unsure what labels to place, it is okay to leave it be, as another team member will help you when they notice the issue lacks certain labels. Once an issue is created, and placed in the Project Management project board, the developer is mostly done with the issue. If the issue contains a dependency, it will move into the \"Ice Box\" column via GitHub automation , or \"New Issue Approval\", otherwise. On rare occasions, a project manager, or other team members, might ping you with questions on the issue. Perhaps the team member did not understand the jargon, or the instructions were unclear. In that case, read their concerns carefully and either answer with a comment, or edit the original issue. Eventually, the issue will be approved, prioritized, and released into the \"Prioritized Backlog\" column, where developers can work on it. Resolve Issues To resolve an issue, take a look at this section of the CONTRIBUTING.md. When choosing an issue to work on from the \"Prioritized Backlog\" column, it is good to note the \"role\" and \"size\" label. This signals the expertise required and time commitment needed to resolve the issue. As a rule of thumb, a smaller issue should take a week, and a larger issue, two or three weeks. This should give you a good idea on what issues is best for you to take at the moment. If you are completely new, we recommend taking smaller issues to understand your limits before pushing them further. That said, you are free to work on whatever you want. On occasion, when an issue is being worked on for an inordinate amount of time, the team might request an update on your progress. When giving your progress, it is courteous to give an ETA on the issue, and evaluate on your ability to resolve the issue in a reasonable timeframe. If an issue is taking far too long, it might be wise to abandon the issue and work on something that might bring more value to you and the team. Most issues can be divided into two broad types: frontend issues, and backend issues. Frontend issues Usually involves the appearance of the website Usually easier than backend issues Requires little research Is occasionally an audit May involve documentation When working on frontend issues, there will usually be a link to the Figma design. Figma often contains multiple prototypes and future prototypes. When looking for our current design, go to the bottom right corner and look for a pink rectangle. Anything within that represents our most up-to-date design. Use that as a reference for your frontend issues. If the pink rectangle is not there, please request the UI design team to put a pink rectangle on the latest approved design. On rare circumstances, designs can change in the middle of work. This is something that happens as part of development, but will often be telegraphed during meetings. If a design change, you are free to reassess and abandon your current issue, or code pragmatically to ensure your work would not need a massive overhaul. Backend issues Usually involves research and discussion Can also pertain to GitHub Actions Usually takes some time May involve documentation Review Code To review code, please take a look at this GitHub documentation , and this portion of our CONTRIBUTING.md . Code that should be reviewed is found in the pull request tab . These are issues that require someone to look over for several criteria: Applicability: Were the correct changes made? Where new lines added or removed that are extraneous to the issue? Brokenness: Did the changes break the website? Is the changes responsive to view-port changes? Cleanliness: Is the new code programmatic or messy? Would the code be hard to maintain in the long run? When code meets all three criteria, it can then be merged and made a part of the website. Otherwise, the review should indicate changes that needs to be made. As an advanced project, CivicTechJobs have certain expectations for our developers. One of these is that issues of size 1 or 2 is small enough that we \"pre-review\" them. This means that we are confident that the developer can resolve these issues without review. Therefore, these issues can be merged directly into our code-base upon resolution. That said, it is still fine to request the team to review your code if feedback is desired. Important: Although issues can be pre-reviewed, do not make a habit of merging without making a pull request. There will be times when you performed an accidental merge, which could be a pain to fix on the command line. As one final note, code can be merged solely on one approved review but it is fine to request more reviewers or ask for the team to review it during a developer meeting.","title":"Development Culture"},{"location":"developer/development-culture/#development-culture","text":"At CivicTechJobs, the developers of our team have 3 key tasks: Make issues Resolve issues Review code This guide will discuss how each of these work at CivicTechJobs. If you have any questions be sure to let us know! We strive to create an inclusive space for developers to learn and achieve their goals.","title":"Development Culture"},{"location":"developer/development-culture/#make-issues","text":"To make an issue, follow this guide from GitHub, or take a look at this section of the CONTRIBUTING.md. At CivicTechJobs, updating the project starts with creating an issue outlining the situation and changes needed to resolve the situation. When writing an issue, a good rule of thumb is to write as if another developer would be the one to work on the issue. Therefore, being thorough is better than brief. Some good guidelines to follow: Write a brief, two sentence summary for the overview. Be sure to note why these changes is needed. In the overview, use language with little jargon. Action items are usually step by step instructions or a list of requirements. Longer explanations or useful documentation, if needed, are placed in the Instruction/Resources section. Dependencies should 90% of the time be another issue. If this issue does not exist, it should probably be made and referenced as a dependency. Likewise, the dependency should reference the issue it is a dependency for so that there is a trail to release issues with dependencies. Check out examples of developer issues, such as this , for how to structure and word issues. After writing out the issue, be sure to add labels . At minimum, we need three labels, one each from the \"size\", \"role\" and \"feature/p-feature\" series. In most cases, you should not create your own label. If you are unsure what labels to place, it is okay to leave it be, as another team member will help you when they notice the issue lacks certain labels. Once an issue is created, and placed in the Project Management project board, the developer is mostly done with the issue. If the issue contains a dependency, it will move into the \"Ice Box\" column via GitHub automation , or \"New Issue Approval\", otherwise. On rare occasions, a project manager, or other team members, might ping you with questions on the issue. Perhaps the team member did not understand the jargon, or the instructions were unclear. In that case, read their concerns carefully and either answer with a comment, or edit the original issue. Eventually, the issue will be approved, prioritized, and released into the \"Prioritized Backlog\" column, where developers can work on it.","title":"Make Issues"},{"location":"developer/development-culture/#resolve-issues","text":"To resolve an issue, take a look at this section of the CONTRIBUTING.md. When choosing an issue to work on from the \"Prioritized Backlog\" column, it is good to note the \"role\" and \"size\" label. This signals the expertise required and time commitment needed to resolve the issue. As a rule of thumb, a smaller issue should take a week, and a larger issue, two or three weeks. This should give you a good idea on what issues is best for you to take at the moment. If you are completely new, we recommend taking smaller issues to understand your limits before pushing them further. That said, you are free to work on whatever you want. On occasion, when an issue is being worked on for an inordinate amount of time, the team might request an update on your progress. When giving your progress, it is courteous to give an ETA on the issue, and evaluate on your ability to resolve the issue in a reasonable timeframe. If an issue is taking far too long, it might be wise to abandon the issue and work on something that might bring more value to you and the team. Most issues can be divided into two broad types: frontend issues, and backend issues.","title":"Resolve Issues"},{"location":"developer/development-culture/#frontend-issues","text":"Usually involves the appearance of the website Usually easier than backend issues Requires little research Is occasionally an audit May involve documentation When working on frontend issues, there will usually be a link to the Figma design. Figma often contains multiple prototypes and future prototypes. When looking for our current design, go to the bottom right corner and look for a pink rectangle. Anything within that represents our most up-to-date design. Use that as a reference for your frontend issues. If the pink rectangle is not there, please request the UI design team to put a pink rectangle on the latest approved design. On rare circumstances, designs can change in the middle of work. This is something that happens as part of development, but will often be telegraphed during meetings. If a design change, you are free to reassess and abandon your current issue, or code pragmatically to ensure your work would not need a massive overhaul.","title":"Frontend issues"},{"location":"developer/development-culture/#backend-issues","text":"Usually involves research and discussion Can also pertain to GitHub Actions Usually takes some time May involve documentation","title":"Backend issues"},{"location":"developer/development-culture/#review-code","text":"To review code, please take a look at this GitHub documentation , and this portion of our CONTRIBUTING.md . Code that should be reviewed is found in the pull request tab . These are issues that require someone to look over for several criteria: Applicability: Were the correct changes made? Where new lines added or removed that are extraneous to the issue? Brokenness: Did the changes break the website? Is the changes responsive to view-port changes? Cleanliness: Is the new code programmatic or messy? Would the code be hard to maintain in the long run? When code meets all three criteria, it can then be merged and made a part of the website. Otherwise, the review should indicate changes that needs to be made. As an advanced project, CivicTechJobs have certain expectations for our developers. One of these is that issues of size 1 or 2 is small enough that we \"pre-review\" them. This means that we are confident that the developer can resolve these issues without review. Therefore, these issues can be merged directly into our code-base upon resolution. That said, it is still fine to request the team to review your code if feedback is desired. Important: Although issues can be pre-reviewed, do not make a habit of merging without making a pull request. There will be times when you performed an accidental merge, which could be a pain to fix on the command line. As one final note, code can be merged solely on one approved review but it is fine to request more reviewers or ask for the team to review it during a developer meeting.","title":"Review Code"},{"location":"developer/frontend/","text":"Frontend Architecture \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 ISSUE_TEMPLATE/ \u251c\u2500\u2500 config/ \u251c\u2500\u2500 docker/ \u251c\u2500\u2500 frontend/ # Frontend \u2502 \u251c\u2500\u2500 migrations/ \u2502 \u251c\u2500\u2500 src/ # Frontend \u2502 \u251c\u2500\u2500 assets/ # Frontend \u2502 \u251c\u2500\u2500 components/ # Frontend \u2502 \u251c\u2500\u2500 pages/ # Frontend \u2502 \u2514\u2500\u2500 templates/ # Frontend \u2502 \u251c\u2500\u2500 static/ # Frontend \u2502 \u2514\u2500\u2500 frontend/ # Frontend \u2502 \u2514\u2500\u2500 templates/ # Frontend \u2502 \u2514\u2500\u2500 frontend/ # Frontend \u251c\u2500\u2500 server/ \u2502 \u2514\u2500\u2500 migrations/ \u2514\u2500\u2500 <loose files> # Frontend Overall project structure \u251c\u2500\u2500 frontend/ \u2502 \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 Apps.js \u2502 \u2514\u2500\u2500 <Components>/ \u2502 \u251c\u2500\u2500 pages/ \u2502 \u251c\u2500\u2500 templates/ \u2502 \u2514\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 index.js \u2502 \u2514\u2500\u2500 index.scss \u2502 \u251c\u2500\u2500 static \u2502 \u2514\u2500\u2500 templates \u251c\u2500\u2500 .babelrc \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 package.json \u2514\u2500\u2500 webpack.config.js Frontend Architecture Summary Frontend Tech Stack : React, Babel, Webpack, HTML, CSS, JS The over ninety percent of our frontend architecture is housed in our frontend/ directory. This directory is a Django app , which is a set of files that can be ported to any Django-based application. Since our frontend is a Django app, it takes advantage of the way Django serves its static assets. Every Django app, by default, looks to the templates/ * directory within the app for the html template file to serve. This template usually contains <script> and <style> tags denoting the location of CSS and JS files. In Django, these files are usually located inside the static/ * directory. Likewise, our frontend app store our templates and static assets within these directories. Despite these similiarties, however, the files in these two directories should never be manipulated by a developer. These files are automatically generated by an application called Webpack via configurations in webpack.config.js and .babelrc . The files that should be manipulated by developers are housed within the src/ directory. Inside of here are directories for assets/ , componenents/ , pages/ , and templates/ . Each of these directories contains the files which Webpack reads and then bundle into output files for the static/ and template/ directories. *Note: The templates/ and static/ directories contain within them a frontend/ directory in order to namespace template and static files. Although this serves little purpose for our project, it is a Django convention that prevents Django from confusing the templates/ and static/ directories from the frontend app vs another app. Overview of Directories and Files frontend/: houses all the frontend files. frontend/src/: houses all the files for developers to manipulate. The files here are read by Webpack before being bundled into the static/ and templates/ directories. assets/: this is where we store all of our miscellaneous files, such as .jpegs, .svgs, .gifs, etc. componenents/: this is where we store the files that generate our components, such as buttons and cards. To learn more about this in-depth, read the components section of this guide. pages/: contains the React files that pools together various components to generate a page. templates/: contains html files that are then generated into the regular templates directory. To learn more about how Webpack bundle our files, read the Webpack section of this guide. index.js: this file serves as the entry point for all other js files*. This file is read by Webpack, and then bundled into code in the static directory. index.scss: this file serves as the entry point for all other scss files*. frontend/static/: automatically generated by Webpack, DO NOT EDIT frontend/templates/: automatically generated by Webpack, DO NOT EDIT .babelrc: Babel's configuration. To learn more about this, please visit babel's documentation . package-lock.json & package.json: These files are created by npm to keep track of dependencies. Please visit npm's documentation to understand them. webpack.config.js: Webpack's configuration. To learn more about configuring Webpack, please visit their documentation . To learn about our specific configuration, see the below guide . *Note: This is technically a lie. In actuality, index.js , reads index.scss as well as the React files, making it the only entryway for all files bundled in the src/ directory. Components Directory \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 Basics/ \u2502 \u251c\u2500\u2500 Colors.scss \u2502 \u2514\u2500\u2500 Titles.scss \u2502 \u251c\u2500\u2500 Buttons/ \u2502 \u251c\u2500\u2500 Buttons.js \u2502 \u2514\u2500\u2500 Buttons.scss \u2502 \u251c\u2500\u2500 Cards/ \u2502 \u251c\u2500\u2500 Cards.js \u2502 \u2514\u2500\u2500 Cards.scss \u2502 \u2514\u2500\u2500 <Components>/ A closer look at a theoretical expansion of the components directory The components directory contains our website components. Each directory in here represents a different class of components, such as Buttons/ * or Cards/ *. Within these directories are the files necessary that creates these components. Likewise, the special Basics/ directory contains small css classes that are reused, but not, technically, components, such as text-size or text-colors. *Note: These files are capitalized to follow React convention for components. When making new components, please make sure to follow this convention. This convention is in place to help React differentiate between modules vs other types of imports. Webpack Configurations ... module.exports = { mode: 'development', entry: { index: \"./frontend/src/index.js\" }, output: { clean: { keep: '.gitkeep' }, filename: '[name].[contenthash].js', path: path.resolve(__dirname, 'frontend/static/frontend'), }, devtool: 'inline-source-map', module: { rules: ... }, optimization: { moduleIds: 'deterministic', runtimeChunk: 'single', splitChunks: ... }, plugins: [ new HtmlWebpackPlugin({ filename: '../../templates/frontend/index.html', template: '/frontend/src/templates/index.html', }), ], watchOptions: { ignored: /node_modules/, }, } webpack.config.js (truncated) Our webpack.config.js file is one of the most important files to understanding how our frontend architecture comes together. Therefore, this section is dedicated to the settings that we have set for this file. Note that we do not explain all the settings, as some can be found and easily deduced from webpack's configuration and guides documentation. entry: the file that is ultimately read by webpack to bundle everything together. This file, index.js imports all dependencies and files that makes up our product. Note that advanced multiple entry is possible, should we ever need it. output: contains configurations for the files that are generated in the static/ directory output > clean > keep: clean is usually used to clear away old files before generating new ones (file names are variable to force browser css/js recacheing). However, keep notes files that should not be removed*. output > filename: this configures the name of the generated js files. [name] is simply the name of the file noted in the entry configuration, and [contenthash] is a randomly generated string, which forces browser recacheing. output > path: the directory to place the generated file. This directory is the one that Django, by default, detects its static files. optimization: this contains a catch-all for various ways to enhance either development or deployment. For more on our current configuration, read this guide . plugins > HtmlWebpackPlugin: this plugin enables us to dynamically generate templates with the correct <script> and <styles> path by reading the template and outputing it with the path noted by filename . This output path follows Django's default template directory structure. watchOptions > ignored: configures files to ignore when regenerating watched files. *Note: The kept .gitkeep file is there to give an empty file for git to preserve the otherwise empty directory when pushed onto GitHub. As you might have guessed, git does not push empty directories. Why do we separate Babel from Webpack? If you have explored documentation from Webpack, you might learn that the babel-loader in module > rules can accept the settings noted in .babelrc . The reason why we separate these settings into another file is because Webpack is not, in theory, the only application that makes use of these settings. Although we have no other apps that makes use of .babelrc at the moment, this can change in the future. Therefore, this separation of files is a form of future proofing. Additional Resources Sass Documentation React Documentation Webpack Documentation @babel/preset-react Documentation","title":"Frontend Architecture"},{"location":"developer/frontend/#frontend-architecture","text":"\u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 ISSUE_TEMPLATE/ \u251c\u2500\u2500 config/ \u251c\u2500\u2500 docker/ \u251c\u2500\u2500 frontend/ # Frontend \u2502 \u251c\u2500\u2500 migrations/ \u2502 \u251c\u2500\u2500 src/ # Frontend \u2502 \u251c\u2500\u2500 assets/ # Frontend \u2502 \u251c\u2500\u2500 components/ # Frontend \u2502 \u251c\u2500\u2500 pages/ # Frontend \u2502 \u2514\u2500\u2500 templates/ # Frontend \u2502 \u251c\u2500\u2500 static/ # Frontend \u2502 \u2514\u2500\u2500 frontend/ # Frontend \u2502 \u2514\u2500\u2500 templates/ # Frontend \u2502 \u2514\u2500\u2500 frontend/ # Frontend \u251c\u2500\u2500 server/ \u2502 \u2514\u2500\u2500 migrations/ \u2514\u2500\u2500 <loose files> # Frontend Overall project structure \u251c\u2500\u2500 frontend/ \u2502 \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 Apps.js \u2502 \u2514\u2500\u2500 <Components>/ \u2502 \u251c\u2500\u2500 pages/ \u2502 \u251c\u2500\u2500 templates/ \u2502 \u2514\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 index.js \u2502 \u2514\u2500\u2500 index.scss \u2502 \u251c\u2500\u2500 static \u2502 \u2514\u2500\u2500 templates \u251c\u2500\u2500 .babelrc \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 package.json \u2514\u2500\u2500 webpack.config.js Frontend Architecture","title":"Frontend Architecture"},{"location":"developer/frontend/#summary","text":"Frontend Tech Stack : React, Babel, Webpack, HTML, CSS, JS The over ninety percent of our frontend architecture is housed in our frontend/ directory. This directory is a Django app , which is a set of files that can be ported to any Django-based application. Since our frontend is a Django app, it takes advantage of the way Django serves its static assets. Every Django app, by default, looks to the templates/ * directory within the app for the html template file to serve. This template usually contains <script> and <style> tags denoting the location of CSS and JS files. In Django, these files are usually located inside the static/ * directory. Likewise, our frontend app store our templates and static assets within these directories. Despite these similiarties, however, the files in these two directories should never be manipulated by a developer. These files are automatically generated by an application called Webpack via configurations in webpack.config.js and .babelrc . The files that should be manipulated by developers are housed within the src/ directory. Inside of here are directories for assets/ , componenents/ , pages/ , and templates/ . Each of these directories contains the files which Webpack reads and then bundle into output files for the static/ and template/ directories.","title":"Summary"},{"location":"developer/frontend/#note-the-templates-and-static-directories-contain-within-them-a-frontend-directory-in-order-to-namespace-template-and-static-files-although-this-serves-little-purpose-for-our-project-it-is-a-django-convention-that-prevents-django-from-confusing-the-templates-and-static-directories-from-the-frontend-app-vs-another-app","text":"","title":"*Note: The templates/ and static/ directories contain within them a frontend/ directory in order to namespace template and static files. Although this serves little purpose for our project, it is a Django convention that prevents Django from confusing the templates/ and static/ directories from the frontend app vs another app."},{"location":"developer/frontend/#overview-of-directories-and-files","text":"frontend/: houses all the frontend files. frontend/src/: houses all the files for developers to manipulate. The files here are read by Webpack before being bundled into the static/ and templates/ directories. assets/: this is where we store all of our miscellaneous files, such as .jpegs, .svgs, .gifs, etc. componenents/: this is where we store the files that generate our components, such as buttons and cards. To learn more about this in-depth, read the components section of this guide. pages/: contains the React files that pools together various components to generate a page. templates/: contains html files that are then generated into the regular templates directory. To learn more about how Webpack bundle our files, read the Webpack section of this guide. index.js: this file serves as the entry point for all other js files*. This file is read by Webpack, and then bundled into code in the static directory. index.scss: this file serves as the entry point for all other scss files*. frontend/static/: automatically generated by Webpack, DO NOT EDIT frontend/templates/: automatically generated by Webpack, DO NOT EDIT .babelrc: Babel's configuration. To learn more about this, please visit babel's documentation . package-lock.json & package.json: These files are created by npm to keep track of dependencies. Please visit npm's documentation to understand them. webpack.config.js: Webpack's configuration. To learn more about configuring Webpack, please visit their documentation . To learn about our specific configuration, see the below guide .","title":"Overview of Directories and Files"},{"location":"developer/frontend/#note-this-is-technically-a-lie-in-actuality-indexjs-reads-indexscss-as-well-as-the-react-files-making-it-the-only-entryway-for-all-files-bundled-in-the-src-directory","text":"","title":"*Note: This is technically a lie. In actuality, index.js, reads index.scss as well as the React files, making it the only entryway for all files bundled in the src/ directory."},{"location":"developer/frontend/#components-directory","text":"\u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 Basics/ \u2502 \u251c\u2500\u2500 Colors.scss \u2502 \u2514\u2500\u2500 Titles.scss \u2502 \u251c\u2500\u2500 Buttons/ \u2502 \u251c\u2500\u2500 Buttons.js \u2502 \u2514\u2500\u2500 Buttons.scss \u2502 \u251c\u2500\u2500 Cards/ \u2502 \u251c\u2500\u2500 Cards.js \u2502 \u2514\u2500\u2500 Cards.scss \u2502 \u2514\u2500\u2500 <Components>/ A closer look at a theoretical expansion of the components directory The components directory contains our website components. Each directory in here represents a different class of components, such as Buttons/ * or Cards/ *. Within these directories are the files necessary that creates these components. Likewise, the special Basics/ directory contains small css classes that are reused, but not, technically, components, such as text-size or text-colors.","title":"Components Directory"},{"location":"developer/frontend/#note-these-files-are-capitalized-to-follow-react-convention-for-components-when-making-new-components-please-make-sure-to-follow-this-convention-this-convention-is-in-place-to-help-react-differentiate-between-modules-vs-other-types-of-imports","text":"","title":"*Note: These files are capitalized to follow React convention for components. When making new components, please make sure to follow this convention. This convention is in place to help React differentiate between modules vs other types of imports."},{"location":"developer/frontend/#webpack-configurations","text":"... module.exports = { mode: 'development', entry: { index: \"./frontend/src/index.js\" }, output: { clean: { keep: '.gitkeep' }, filename: '[name].[contenthash].js', path: path.resolve(__dirname, 'frontend/static/frontend'), }, devtool: 'inline-source-map', module: { rules: ... }, optimization: { moduleIds: 'deterministic', runtimeChunk: 'single', splitChunks: ... }, plugins: [ new HtmlWebpackPlugin({ filename: '../../templates/frontend/index.html', template: '/frontend/src/templates/index.html', }), ], watchOptions: { ignored: /node_modules/, }, } webpack.config.js (truncated) Our webpack.config.js file is one of the most important files to understanding how our frontend architecture comes together. Therefore, this section is dedicated to the settings that we have set for this file. Note that we do not explain all the settings, as some can be found and easily deduced from webpack's configuration and guides documentation. entry: the file that is ultimately read by webpack to bundle everything together. This file, index.js imports all dependencies and files that makes up our product. Note that advanced multiple entry is possible, should we ever need it. output: contains configurations for the files that are generated in the static/ directory output > clean > keep: clean is usually used to clear away old files before generating new ones (file names are variable to force browser css/js recacheing). However, keep notes files that should not be removed*. output > filename: this configures the name of the generated js files. [name] is simply the name of the file noted in the entry configuration, and [contenthash] is a randomly generated string, which forces browser recacheing. output > path: the directory to place the generated file. This directory is the one that Django, by default, detects its static files. optimization: this contains a catch-all for various ways to enhance either development or deployment. For more on our current configuration, read this guide . plugins > HtmlWebpackPlugin: this plugin enables us to dynamically generate templates with the correct <script> and <styles> path by reading the template and outputing it with the path noted by filename . This output path follows Django's default template directory structure. watchOptions > ignored: configures files to ignore when regenerating watched files.","title":"Webpack Configurations"},{"location":"developer/frontend/#note-the-kept-gitkeep-file-is-there-to-give-an-empty-file-for-git-to-preserve-the-otherwise-empty-directory-when-pushed-onto-github-as-you-might-have-guessed-git-does-not-push-empty-directories","text":"","title":"*Note: The kept .gitkeep file is there to give an empty file for git to preserve the otherwise empty directory when pushed onto GitHub. As you might have guessed, git does not push empty directories."},{"location":"developer/frontend/#why-do-we-separate-babel-from-webpack","text":"If you have explored documentation from Webpack, you might learn that the babel-loader in module > rules can accept the settings noted in .babelrc . The reason why we separate these settings into another file is because Webpack is not, in theory, the only application that makes use of these settings. Although we have no other apps that makes use of .babelrc at the moment, this can change in the future. Therefore, this separation of files is a form of future proofing.","title":"Why do we separate Babel from Webpack?"},{"location":"developer/frontend/#additional-resources","text":"Sass Documentation React Documentation Webpack Documentation @babel/preset-react Documentation","title":"Additional Resources"},{"location":"developer/github/","text":"GitHub Architecture \u251c\u2500\u2500 .github/ # GitHub \u2502 \u2514\u2500\u2500 ISSUE_TEMPLATE/ #GitHub \u251c\u2500\u2500 config/ \u251c\u2500\u2500 docker/ \u251c\u2500\u2500 frontend/ \u2502 \u251c\u2500\u2500 migrations/ \u2502 \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 pages/ \u2502 \u2514\u2500\u2500 templates/ \u2502 \u251c\u2500\u2500 static/ \u2502 \u2514\u2500\u2500 frontend/ \u2502 \u2514\u2500\u2500 templates/ \u2502 \u2514\u2500\u2500 frontend/ \u251c\u2500\u2500 server/ \u2502 \u2514\u2500\u2500 migrations/ \u2514\u2500\u2500 <loose files> # GitHub Overall project structure \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 ISSUE_TEMPLATE/ \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 LICENSE \u2514\u2500\u2500 README.md/ GitHub structure Summary Overview of Directories and Files LICENSE: README.md: GitHub Actions Additional Resources","title":"GitHub Architecture"},{"location":"developer/github/#github-architecture","text":"\u251c\u2500\u2500 .github/ # GitHub \u2502 \u2514\u2500\u2500 ISSUE_TEMPLATE/ #GitHub \u251c\u2500\u2500 config/ \u251c\u2500\u2500 docker/ \u251c\u2500\u2500 frontend/ \u2502 \u251c\u2500\u2500 migrations/ \u2502 \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 pages/ \u2502 \u2514\u2500\u2500 templates/ \u2502 \u251c\u2500\u2500 static/ \u2502 \u2514\u2500\u2500 frontend/ \u2502 \u2514\u2500\u2500 templates/ \u2502 \u2514\u2500\u2500 frontend/ \u251c\u2500\u2500 server/ \u2502 \u2514\u2500\u2500 migrations/ \u2514\u2500\u2500 <loose files> # GitHub Overall project structure \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 ISSUE_TEMPLATE/ \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 LICENSE \u2514\u2500\u2500 README.md/ GitHub structure","title":"GitHub Architecture"},{"location":"developer/github/#summary","text":"","title":"Summary"},{"location":"developer/github/#overview-of-directories-and-files","text":"LICENSE: README.md:","title":"Overview of Directories and Files"},{"location":"developer/github/#github-actions","text":"","title":"GitHub Actions"},{"location":"developer/github/#additional-resources","text":"","title":"Additional Resources"},{"location":"developer/installation/","text":"Installation Instructions This guide runs through the steps needed to create and run a local version of our project. If you are ever stuck or need clarification, you can contact our team members or the development lead through our Slack or email , and schedule a pair programming session with one of our developers. All of us have been through these steps, and am more than happy to help. By helping you, we can better improve our documentation and grow this project! Required Downloads Git - Windows - macOS - Linux/Unix Docker - Windows - macOS - Linux/Unix Note on macOS The macOS version of git involves downloading extra programs, such as Homebrew. In some cases this program can run up to 8GB of storage space, which might be too much for some. In that scenario, a miniature version of Homebrew can be installed through XCode . But do be warned that the containers for our project takes up a substantial amount of disk space as well. Do consider freeing up your disk space by deleting or backing up unneeded files, like photos or videos, and delete programs that are no longer useful. Your OS's native disk cleaner can also clear out unused cache files. Environmental Setup Fork our repository. Clone our repository to a local version on your PC. Configuring Git to sync your fork with the original repository. When configuring, make sure to not blindly copy and paste the commands without making appropriate edits, especially when it involves your username or the repository name. Running Docker Navigate to the root of our directory, CivicTechJobs/ , in the terminal. In the root, create a file named, secret_key.txt . In this newly created file, input a secret key, either generated through Python's secrets's library or from an online key generator (don't worry, this is not used in production, only locally). In the terminal enter docker compose build and wait for the build to finish. Then, enter docker compose up to run the local server. Visit http://localhost:8000/ and you should see the front page of our website! Frequently Asked Questions This section might answer some of the burning questions you have. If you cannot find it here, be sure to contact our team members or the development lead through our Slack or email . Troubleshooting Errors 1. The command 'docker' could not be found Make sure to turn on Docker by opening the Docker program on your desktop. 2. can't find a suitable configuration file in this directory or any parent: not found Make sure that your terminal location is in a directory with a docker-compose.yml file. And make sure that the file is not hidden. 3. code ERR_SOCKET_TIMEOUT This can result for several reasons, such as havin your sockets overloaded. In order to prevent this, the best thing to do is to lower the amount of sockets used when performing npm install. Change this line in docker/webpack : RUN npm install to: RUN npm install --maxsockets=1 This should allow docker compose up to work. Be sure to delete the addition once your image and container is set up. Additional Resources Git Documentation Docker Documentation Frontend Architecture Backend Architecture GitHub Architecture","title":"Installation Instructions"},{"location":"developer/installation/#installation-instructions","text":"This guide runs through the steps needed to create and run a local version of our project. If you are ever stuck or need clarification, you can contact our team members or the development lead through our Slack or email , and schedule a pair programming session with one of our developers. All of us have been through these steps, and am more than happy to help. By helping you, we can better improve our documentation and grow this project!","title":"Installation Instructions"},{"location":"developer/installation/#required-downloads","text":"Git - Windows - macOS - Linux/Unix Docker - Windows - macOS - Linux/Unix Note on macOS The macOS version of git involves downloading extra programs, such as Homebrew. In some cases this program can run up to 8GB of storage space, which might be too much for some. In that scenario, a miniature version of Homebrew can be installed through XCode . But do be warned that the containers for our project takes up a substantial amount of disk space as well. Do consider freeing up your disk space by deleting or backing up unneeded files, like photos or videos, and delete programs that are no longer useful. Your OS's native disk cleaner can also clear out unused cache files.","title":"Required Downloads"},{"location":"developer/installation/#environmental-setup","text":"Fork our repository. Clone our repository to a local version on your PC. Configuring Git to sync your fork with the original repository. When configuring, make sure to not blindly copy and paste the commands without making appropriate edits, especially when it involves your username or the repository name.","title":"Environmental Setup"},{"location":"developer/installation/#running-docker","text":"Navigate to the root of our directory, CivicTechJobs/ , in the terminal. In the root, create a file named, secret_key.txt . In this newly created file, input a secret key, either generated through Python's secrets's library or from an online key generator (don't worry, this is not used in production, only locally). In the terminal enter docker compose build and wait for the build to finish. Then, enter docker compose up to run the local server. Visit http://localhost:8000/ and you should see the front page of our website!","title":"Running Docker"},{"location":"developer/installation/#frequently-asked-questions","text":"This section might answer some of the burning questions you have. If you cannot find it here, be sure to contact our team members or the development lead through our Slack or email .","title":"Frequently Asked Questions"},{"location":"developer/installation/#troubleshooting-errors","text":"","title":"Troubleshooting Errors"},{"location":"developer/installation/#1-the-command-docker-could-not-be-found","text":"Make sure to turn on Docker by opening the Docker program on your desktop.","title":"1. The command 'docker' could not be found"},{"location":"developer/installation/#2-cant-find-a-suitable-configuration-file-in-this-directory-or-any-parent-not-found","text":"Make sure that your terminal location is in a directory with a docker-compose.yml file. And make sure that the file is not hidden.","title":"2. can't find a suitable configuration file in this directory or any parent: not found"},{"location":"developer/installation/#3-code-err_socket_timeout","text":"This can result for several reasons, such as havin your sockets overloaded. In order to prevent this, the best thing to do is to lower the amount of sockets used when performing npm install. Change this line in docker/webpack : RUN npm install to: RUN npm install --maxsockets=1 This should allow docker compose up to work. Be sure to delete the addition once your image and container is set up.","title":"3. code ERR_SOCKET_TIMEOUT"},{"location":"developer/installation/#additional-resources","text":"Git Documentation Docker Documentation Frontend Architecture Backend Architecture GitHub Architecture","title":"Additional Resources"}]}